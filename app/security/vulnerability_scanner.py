"""
취약점 스캔 모듈

시스템의 취약점을 스캔하고 보고하는 기능을 제공합니다.
"""
import logging
import subprocess
import json
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple

logger = logging.getLogger(__name__)

class VulnerabilityScanner:
    """취약점 스캔을 실행하고 결과를 관리하는 클래스"""
    
    def __init__(self, config_path: Optional[str] = None):
        """
        취약점 스캐너 초기화
        
        Args:
            config_path: 스캐너 설정 파일 경로
        """
        self.config_path = config_path
        self.results: Dict[str, Any] = {}
        self.scan_date = None
        self.config = self._load_config()
        
    def _load_config(self) -> Dict[str, Any]:
        """설정 파일 로드"""
        if not self.config_path:
            # 기본 설정 사용
            return {
                "scan_targets": ["app", "tests"],
                "excluded_paths": ["__pycache__", "node_modules", ".venv"],
                "report_path": "security/reports",
                "severity_threshold": "medium",
                "scan_tools": {
                    "bandit": True,
                    "safety": True,
                    "dependency_check": True
                }
            }
        
        try:
            with open(self.config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"설정 파일 로드 실패: {e}")
            return {}
    
    def run_bandit_scan(self) -> Tuple[bool, Dict[str, Any]]:
        """
        Bandit을 사용한 파이썬 코드 보안 취약점 스캔 실행
        
        Returns:
            (성공 여부, 결과 데이터)
        """
        try:
            targets = " ".join(self.config.get("scan_targets", []))
            excluded = ",".join(self.config.get("excluded_paths", []))
            
            cmd = f"bandit -r {targets} -f json -o security/reports/bandit_results.json"
            if excluded:
                cmd += f" --exclude {excluded}"
                
            logger.info(f"Bandit 스캔 실행: {cmd}")
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                # 결과 파일 파싱
                try:
                    with open("security/reports/bandit_results.json", 'r') as f:
                        scan_data = json.load(f)
                        self.results["bandit"] = scan_data
                        return True, scan_data
                except Exception as e:
                    logger.error(f"Bandit 결과 파싱 실패: {e}")
                    return False, {"error": str(e)}
            else:
                logger.error(f"Bandit 스캔 실패: {result.stderr}")
                return False, {"error": result.stderr}
                
        except Exception as e:
            logger.error(f"Bandit 스캔 예외 발생: {e}")
            return False, {"error": str(e)}
    
    def run_safety_check(self) -> Tuple[bool, Dict[str, Any]]:
        """
        Safety를 사용한 파이썬 의존성 취약점 검사 실행
        
        Returns:
            (성공 여부, 결과 데이터)
        """
        try:
            cmd = "safety check --json > security/reports/safety_results.json"
            logger.info(f"Safety 검사 실행: {cmd}")
            
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                # 결과 파일 파싱
                try:
                    with open("security/reports/safety_results.json", 'r') as f:
                        scan_data = json.load(f)
                        self.results["safety"] = scan_data
                        return True, scan_data
                except Exception as e:
                    logger.error(f"Safety 결과 파싱 실패: {e}")
                    return False, {"error": str(e)}
            else:
                logger.error(f"Safety 검사 실패: {result.stderr}")
                return False, {"error": result.stderr}
                
        except Exception as e:
            logger.error(f"Safety 검사 예외 발생: {e}")
            return False, {"error": str(e)}
    
    def run_full_scan(self) -> Dict[str, Any]:
        """
        전체 취약점 스캔 실행
        
        Returns:
            통합 스캔 결과
        """
        scan_tools = self.config.get("scan_tools", {})
        report_path = Path(self.config.get("report_path", "security/reports"))
        
        # 리포트 디렉토리 생성
        report_path.mkdir(parents=True, exist_ok=True)
        
        results = {
            "summary": {
                "total_vulnerabilities": 0,
                "high_severity": 0,
                "medium_severity": 0,
                "low_severity": 0
            },
            "tools": {}
        }
        
        # Bandit 스캔
        if scan_tools.get("bandit", False):
            success, bandit_results = self.run_bandit_scan()
            if success:
                results["tools"]["bandit"] = bandit_results
                # 심각도별 취약점 수 추가
                for issue in bandit_results.get("results", []):
                    results["summary"]["total_vulnerabilities"] += 1
                    severity = issue.get("issue_severity", "").lower()
                    if severity == "high":
                        results["summary"]["high_severity"] += 1
                    elif severity == "medium":
                        results["summary"]["medium_severity"] += 1
                    elif severity == "low":
                        results["summary"]["low_severity"] += 1
        
        # Safety 검사
        if scan_tools.get("safety", False):
            success, safety_results = self.run_safety_check()
            if success:
                results["tools"]["safety"] = safety_results
                # 취약점 수 추가
                vulnerabilities = safety_results.get("vulnerabilities", [])
                results["summary"]["total_vulnerabilities"] += len(vulnerabilities)
                
                for vuln in vulnerabilities:
                    severity = vuln.get("severity", "").lower()
                    if severity == "high":
                        results["summary"]["high_severity"] += 1
                    elif severity == "medium":
                        results["summary"]["medium_severity"] += 1
                    elif severity == "low":
                        results["summary"]["low_severity"] += 1
        
        # 통합 보고서 저장
        with open(report_path / "vulnerability_report.json", 'w') as f:
            json.dump(results, f, indent=2)
            
        return results
    
    def get_recommended_fixes(self) -> Dict[str, List[str]]:
        """
        취약점에 대한 권장 수정 사항 제공
        
        Returns:
            취약점별 권장 수정 사항
        """
        recommendations = {}
        
        # Bandit 결과에서 권장 사항 추출
        if "bandit" in self.results:
            for issue in self.results["bandit"].get("results", []):
                issue_id = issue.get("test_id")
                if issue_id not in recommendations:
                    recommendations[issue_id] = []
                
                recommendations[issue_id].append(
                    f"파일: {issue.get('filename')}, 라인: {issue.get('line_number')} - "
                    f"{issue.get('test_name')}: {issue.get('issue_text')}. "
                    f"권장 수정: {issue.get('more_info', 'https://bandit.readthedocs.io/')}"
                )
        
        # Safety 결과에서 권장 사항 추출
        if "safety" in self.results:
            for vuln in self.results["safety"].get("vulnerabilities", []):
                package = vuln.get("package_name")
                if package not in recommendations:
                    recommendations[package] = []
                
                recommendations[package].append(
                    f"{package} {vuln.get('vulnerable_spec')} 취약점: {vuln.get('advisory')}. "
                    f"권장 조치: {vuln.get('fixed_version', '최신 버전')}으로 업그레이드하세요."
                )
        
        return recommendations 