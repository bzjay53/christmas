[tool.poetry]
name = "christmas"
version = "0.1.0"
description = "Docker 컨테이너 기반의 초단타(스켈핑) 자동 매매 플랫폼"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = {extras = ["all"], version = "^0.104.1"}
uvicorn = {extras = ["standard"], version = "^0.23.2"}
redis = "^5.0.1"
psycopg2-binary = "^2.9.6"
sqlalchemy = "^2.0.0"
pydantic = {extras = ["email"], version = "^2.4.2"}
python-telegram-bot = "^22.0"
httpx = "^0.27.0"
pandas = "^2.1.1"
numpy = "^1.26.0"
ta-lib = "^0.4.29"
flask = "^2.3.3"
flask-assets = "^2.1.0"
cssmin = "^0.2.0"
jsmin = "^3.0.1"
flask-wtf = "^1.2.1"
flask-login = "^0.6.3"
gunicorn = "^21.2.0"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
flake8 = "^6.1.0"
black = "^23.9.1"
isort = "^5.12.0"
mypy = "^1.5.1"
pre-commit = "^3.4.0"
pytest-asyncio = "^0.21.1"

[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "christmas"
description = "초단타(스켈핑) 자동 매매 플랫폼"
authors = [
    {name = "Christmas Team", email = "info@christmas.com"}
]
version = "0.1.0"
requires-python = ">=3.9"
license = {text = "Proprietary"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
]
dependencies = [
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "pydantic>=1.8.2",
    "pydantic[email]>=1.8.2",
    "sqlalchemy>=1.4.23",
    "asyncpg>=0.24.0",
    "psycopg2-binary>=2.9.1",
    "redis>=4.3.4",
    "pandas>=1.3.2",
    "numpy>=1.21.2",
    "python-dotenv>=0.19.0",
    "websockets>=10.0",
    "aiohttp>=3.7.4",
    "httpx>=0.18.2",
    "pytest>=6.2.5",
    "ta-lib>=0.4.24",
    "plotly>=5.3.1",
    "dash>=2.0.0",
    "backtrader>=1.9.76.123",
    "dash-bootstrap-components>=1.0.0",
    "prometheus-client>=0.11.0",
    "cryptography>=38.0.3",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "python-jose>=3.3.0",
    "passlib>=1.7.4",
]

[project.optional-dependencies]
dev = [
    "black>=22.3.0",
    "isort>=5.9.3",
    "mypy>=0.910",
    "flake8>=3.9.2",
    "pytest-cov>=2.12.1",
    "pytest-asyncio>=0.15.1",
    "pre-commit>=2.15.0",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
asyncio_mode = "auto" 