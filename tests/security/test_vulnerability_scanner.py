import os
import json
import tempfile
import pytest
from unittest.mock import patch, MagicMock

from app.security.vulnerability_scanner import VulnerabilityScanner

class TestVulnerabilityScanner:
    """취약점 스캐너 테스트 클래스"""
    
    def setup_method(self):
        """각 테스트 전 설정"""
        # 임시 설정 파일 생성
        self.temp_dir = tempfile.TemporaryDirectory()
        self.config_path = os.path.join(self.temp_dir.name, "test_scanner_config.json")
        self.report_path = os.path.join(self.temp_dir.name, "security/reports")
        
        # 테스트 설정 파일 생성
        config = {
            "scan_targets": ["app", "tests"],
            "excluded_paths": ["__pycache__", "node_modules", ".venv"],
            "report_path": self.report_path,
            "severity_threshold": "medium",
            "scan_tools": {
                "bandit": True,
                "safety": True,
                "dependency_check": False
            }
        }
        
        os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
        with open(self.config_path, 'w') as f:
            json.dump(config, f)
            
        # 보고서 디렉토리 생성
        os.makedirs(self.report_path, exist_ok=True)
    
    def teardown_method(self):
        """각 테스트 후 정리"""
        self.temp_dir.cleanup()
    
    def test_init_with_config(self):
        """설정 파일로 초기화 테스트"""
        scanner = VulnerabilityScanner(config_path=self.config_path)
        assert scanner.config["scan_targets"] == ["app", "tests"]
        assert scanner.config["excluded_paths"] == ["__pycache__", "node_modules", ".venv"]
        assert scanner.config["severity_threshold"] == "medium"
        assert scanner.config["scan_tools"]["bandit"] == True
        assert scanner.config["scan_tools"]["safety"] == True
        assert scanner.config["scan_tools"]["dependency_check"] == False
    
    def test_init_without_config(self):
        """설정 파일 없이 초기화 테스트"""
        scanner = VulnerabilityScanner()
        assert "scan_targets" in scanner.config
        assert "excluded_paths" in scanner.config
        assert "scan_tools" in scanner.config
    
    @patch('subprocess.run')
    def test_run_bandit_scan_success(self, mock_run):
        """Bandit 스캔 성공 테스트"""
        # 성공적인 프로세스 실행 모킹
        process_mock = MagicMock()
        process_mock.returncode = 0
        mock_run.return_value = process_mock
        
        # 테스트 경로 조정
        test_report_path = os.path.join(self.temp_dir.name, "bandit_results.json")
        
        # 결과 파일 모킹
        bandit_result = {
            "metrics": {
                "total_lines_of_code": 1000,
                "total_files": 50,
                "total_issues": 5
            },
            "results": [
                {
                    "test_id": "B101",
                    "test_name": "assert_used",
                    "issue_severity": "low",
                    "issue_confidence": "high",
                    "issue_text": "Use of assert detected",
                    "filename": "app/test.py",
                    "line_number": 42
                }
            ]
        }
        
        with open(test_report_path, 'w') as f:
            json.dump(bandit_result, f)
        
        # 스캐너 메서드 패치
        scanner = VulnerabilityScanner(config_path=self.config_path)
        
        # read_results 메서드를 모의 객체로 대체
        with patch.object(scanner, '_read_json_results', return_value=bandit_result):
            success, result = scanner.run_bandit_scan()
            assert success == True
            assert result["metrics"]["total_issues"] == 5
            assert "B101" in [issue["test_id"] for issue in result["results"]]
    
    @patch('subprocess.run')
    def test_run_bandit_scan_failure(self, mock_run):
        """Bandit 스캔 실패 테스트"""
        # 실패한 프로세스 실행 모킹
        process_mock = MagicMock()
        process_mock.returncode = 1
        process_mock.stderr = "Bandit error occurred"
        mock_run.return_value = process_mock
        
        scanner = VulnerabilityScanner(config_path=self.config_path)
        success, result = scanner.run_bandit_scan()
        
        assert success == False
        assert "error" in result
        assert result["error"] == "Bandit error occurred"
        
        # 명령어 실행 확인
        mock_run.assert_called_once()
    
    @patch('subprocess.run')
    def test_run_safety_check_success(self, mock_run):
        """Safety 검사 성공 테스트"""
        # 성공적인 프로세스 실행 모킹
        process_mock = MagicMock()
        process_mock.returncode = 0
        mock_run.return_value = process_mock
        
        # 테스트 경로 조정
        test_report_path = os.path.join(self.temp_dir.name, "safety_results.json")
        
        # 결과 파일 모킹
        safety_result = {
            "scan_date": "2023-12-20T10:00:00Z",
            "vulnerabilities": [
                {
                    "package_name": "django",
                    "vulnerable_spec": "<3.2.8",
                    "severity": "high",
                    "advisory": "Cross-site scripting vulnerability"
                }
            ]
        }
        
        with open(test_report_path, 'w') as f:
            json.dump(safety_result, f)
        
        scanner = VulnerabilityScanner(config_path=self.config_path)
        
        # read_results 메서드를 모의 객체로 대체
        with patch.object(scanner, '_read_json_results', return_value=safety_result):
            success, result = scanner.run_safety_check()
            assert success == True
            assert len(result["vulnerabilities"]) == 1
            assert result["vulnerabilities"][0]["package_name"] == "django"
    
    @patch('app.security.vulnerability_scanner.VulnerabilityScanner.run_bandit_scan')
    @patch('app.security.vulnerability_scanner.VulnerabilityScanner.run_safety_check')
    def test_run_full_scan(self, mock_safety, mock_bandit):
        """전체 스캔 테스트"""
        # 각 스캔 도구 결과 모킹
        bandit_result = (True, {
            "results": [
                {"issue_severity": "high", "test_id": "B101"},
                {"issue_severity": "medium", "test_id": "B102"},
                {"issue_severity": "low", "test_id": "B103"}
            ]
        })
        
        safety_result = (True, {
            "vulnerabilities": [
                {"severity": "high", "package_name": "django"},
                {"severity": "medium", "package_name": "flask"}
            ]
        })
        
        mock_bandit.return_value = bandit_result
        mock_safety.return_value = safety_result
        
        scanner = VulnerabilityScanner(config_path=self.config_path)
        full_results = scanner.run_full_scan()
        
        # 요약 통계 확인
        assert full_results["summary"]["total_vulnerabilities"] == 5
        assert full_results["summary"]["high_severity"] == 2
        assert full_results["summary"]["medium_severity"] == 2
        assert full_results["summary"]["low_severity"] == 1
        
        # 도구별 결과 확인
        assert "bandit" in full_results["tools"]
        assert "safety" in full_results["tools"]
        
        # 보고서 파일 생성 확인
        report_file = os.path.join(self.report_path, "vulnerability_report.json")
        assert os.path.exists(report_file)
        
        # 보고서 내용 확인
        with open(report_file, 'r') as f:
            report_data = json.load(f)
            assert report_data["summary"]["total_vulnerabilities"] == 5
    
    def test_get_recommended_fixes(self):
        """권장 수정 사항 제공 테스트"""
        scanner = VulnerabilityScanner(config_path=self.config_path)
        
        # 임의의 스캔 결과 설정
        scanner.results = {
            "bandit": {
                "results": [
                    {
                        "test_id": "B101",
                        "test_name": "assert_used",
                        "issue_text": "Use of assert detected",
                        "filename": "app/test.py",
                        "line_number": 42,
                        "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html"
                    }
                ]
            },
            "safety": {
                "vulnerabilities": [
                    {
                        "package_name": "django",
                        "vulnerable_spec": "<3.2.8",
                        "advisory": "Cross-site scripting vulnerability",
                        "fixed_version": "3.2.8"
                    }
                ]
            }
        }
        
        recommendations = scanner.get_recommended_fixes()
        
        # Bandit 권장 사항 확인
        assert "B101" in recommendations
        assert len(recommendations["B101"]) == 1
        assert "app/test.py" in recommendations["B101"][0]
        assert "Use of assert detected" in recommendations["B101"][0]
        
        # Safety 권장 사항 확인
        assert "django" in recommendations
        assert len(recommendations["django"]) == 1
        assert "Cross-site scripting vulnerability" in recommendations["django"][0]
        assert "3.2.8으로 업그레이드하세요" in recommendations["django"][0]


if __name__ == "__main__":
    pytest.main(["-xvs", "test_vulnerability_scanner.py"]) 