# Christmas Trading - Docker Environment Configuration
# Docker 컨테이너 실행을 위한 환경 변수 설정

# =================================================================
# Application Environment
# =================================================================
NODE_ENV=production
VITE_APP_ENV=docker

# =================================================================
# Supabase Configuration
# =================================================================
VITE_SUPABASE_URL=https://qehzzsxzjijfzqkysazc.supabase.co
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# =================================================================
# Binance API Configuration (암호화폐 거래)
# =================================================================
VITE_BINANCE_API_KEY=your_binance_api_key_here
VITE_BINANCE_SECRET_KEY=your_binance_secret_key_here
VITE_BINANCE_TESTNET=true
VITE_BINANCE_BASE_URL=https://api.binance.com
VITE_BINANCE_TESTNET_URL=https://testnet.binance.vision

# =================================================================
# Mock Data Configuration
# =================================================================
# true: Mock 데이터 사용 (개발/테스트용)
# false: 실제 API 사용 (프로덕션용)
VITE_ENABLE_MOCK_DATA=true

# =================================================================
# MCP (Model Context Protocol) Configuration
# =================================================================
# Gemini API Key (AI 분석 서비스용)
GEMINI_API_KEY=your_gemini_api_key_here

# Git Repository Path (Docker 컨테이너 내부)
GIT_REPOSITORY=/app

# Project Configuration
PROJECT_NAME=Christmas Trading
PROJECT_CONTEXT=Christmas Trading - Binance Crypto Platform

# Memory Bank Configuration
MEMORY_STORAGE_PATH=/app/data/.memory

# =================================================================
# Docker-specific Configuration
# =================================================================
# 컨테이너 간 통신을 위한 내부 네트워크
CHRISTMAS_NETWORK=christmas-network

# 데이터 지속성을 위한 볼륨 경로
CHRISTMAS_DATA_PATH=/app/data
CHRISTMAS_LOGS_PATH=/app/logs

# =================================================================
# Port Configuration
# =================================================================
# 메인 애플리케이션 포트
FRONTEND_PORT=3000

# MCP 서비스 포트들
TASK_MASTER_PORT=8001
MEMORY_BANK_PORT=8002
GEMINI_MCP_PORT=8003

# 개발 서버 포트 (개발 모드에서만)
DEV_SERVER_PORT=5173

# 프록시 포트
HTTP_PORT=80
HTTPS_PORT=443

# =================================================================
# Database Configuration
# =================================================================
# SQLite 데이터베이스 파일 경로
TASK_MASTER_DB=/app/data/.task-master.db
MEMORY_BANK_DB=/app/data/.memory-bank.db

# =================================================================
# Logging Configuration
# =================================================================
# 로그 레벨 설정
LOG_LEVEL=INFO

# 로그 파일 경로
TASK_MASTER_LOG=/app/logs/task-master.log
MEMORY_BANK_LOG=/app/logs/memory-bank.log
GEMINI_MCP_LOG=/app/logs/gemini-mcp.log

# =================================================================
# Security Configuration
# =================================================================
# API 키 암호화를 위한 키 (프로덕션에서는 안전한 값으로 변경)
API_ENCRYPTION_KEY=your_secure_encryption_key_here

# CORS 설정
CORS_ORIGIN=http://localhost:3000,http://localhost:80

# =================================================================
# Performance Configuration
# =================================================================
# Node.js 메모리 제한
NODE_OPTIONS=--max-old-space-size=512

# Python 버퍼링 비활성화 (로깅 개선)
PYTHONUNBUFFERED=1

# =================================================================
# Development vs Production
# =================================================================
# 개발 모드에서만 사용할 환경 변수들
# COMPOSE_PROFILES=development  # 개발 서비스 활성화
# COMPOSE_PROFILES=proxy        # Nginx 프록시 활성화

# =================================================================
# Health Check Configuration
# =================================================================
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3

# =================================================================
# 사용법 안내
# =================================================================
# 1. 이 파일을 .env로 복사: cp .env.docker .env
# 2. 실제 API 키들로 값 변경
# 3. Docker Compose로 실행: docker-compose up -d
# 
# 개발 모드: docker-compose --profile development up -d
# 프록시 포함: docker-compose --profile proxy up -d
#
# 로그 확인: docker-compose logs -f christmas-trading
# 서비스 상태: docker-compose ps
# 종료: docker-compose down